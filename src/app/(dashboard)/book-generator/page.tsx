
'use client';
import { useState, useEffect } from 'react';
import { generateBook, GenerateBookOutput } from '@/ai/flows/generate-book';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Loader2, BookPlus, Sparkles, FileDown, BookOpen } from 'lucide-react';
import jsPDF from 'jspdf';

export default function BookGeneratorPage() {
  const [title, setTitle] = useState('');
  const [chapters, setChapters] = useState('3');
  const [purpose, setPurpose] = useState('');
  const [book, setBook] = useState<GenerateBookOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey, setApiKey] = useState<string | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    const fetchApiKey = () => {
      const storedKey = localStorage.getItem('user-gemini-api-key');
      setApiKey(storedKey);
    };

    fetchApiKey();
    window.addEventListener('apiKeyUpdated', fetchApiKey);

    return () => {
      window.removeEventListener('apiKeyUpdated', fetchApiKey);
    };
  }, []);

  const handleGenerateBook = async () => {
    if (!title.trim() || !purpose.trim()) {
      toast({ title: 'Error', description: 'Please fill out all fields.', variant: 'destructive' });
      return;
    }
    const numChapters = parseInt(chapters, 10);
    if (isNaN(numChapters) || numChapters <= 0 || numChapters > 10) {
        toast({ title: 'Error', description: 'Number of chapters must be between 1 and 10.', variant: 'destructive' });
        return;
    }

    setIsLoading(true);
    setBook(null);

    try {
      const result = await generateBook({ title, numChapters, purpose, apiKey: apiKey || undefined });
      setBook(result);
    } catch (error) {
      console.error('Error generating book:', error);
      toast({ title: 'Error', description: 'Failed to generate the book. Please try again.', variant: 'destructive' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownloadPdf = () => {
    if (!book) return;

    const doc = new jsPDF({
        orientation: 'p',
        unit: 'pt',
        format: 'a4'
    });
    
    const pageHeight = doc.internal.pageSize.getHeight();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 40;
    let y = margin;

    const addText = (text: string, options: any) => {
        const splitText = doc.splitTextToSize(text, pageWidth - margin * 2);
        doc.text(splitText, margin, y, options);
        y += (splitText.length * (options.fontSize || 12)) * 1.2;
    };
    
    // Title Page
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(28);
    doc.text(book.title, pageWidth / 2, y + 60, { align: 'center' });
    doc.setFontSize(16);
    doc.setFont('helvetica', 'normal');
    doc.text('Generated by EduGenius', pageWidth / 2, y + 90, { align: 'center' });
    doc.addPage();
    y = margin;

    // Chapters
    book.chapters.forEach((chapter, index) => {
        if (y > pageHeight - margin * 2) {
            doc.addPage();
            y = margin;
        }

        doc.setFont('helvetica', 'bold');
        doc.setFontSize(18);
        addText(`Chapter ${index + 1}: ${chapter.title}`, { fontSize: 18 });
        y += 10;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(12);
        addText(chapter.content, { fontSize: 12 });
        
        y += 20;

        if (index < book.chapters.length - 1) {
            doc.addPage();
            y = margin;
        }
    });

    doc.save(`${book.title.replace(/\s/g, '_')}.pdf`);
  };

  return (
    <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
      <div className="flex items-center">
        <h1 className="font-headline text-3xl md:text-4xl">AI Book Generator</h1>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-1 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Create Your Book</CardTitle>
              <CardDescription>Let AI be your co-author. Just provide the details and watch the magic happen.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label htmlFor="title">Book Title</label>
                <Input id="title" placeholder="e.g., The History of the Cosmos" value={title} onChange={(e) => setTitle(e.target.value)} disabled={isLoading} />
              </div>
              <div className="space-y-2">
                <label htmlFor="chapters">Number of Chapters (1-10)</label>
                <Input id="chapters" type="number" min="1" max="10" placeholder="e.g., 5" value={chapters} onChange={(e) => setChapters(e.target.value)} disabled={isLoading} />
              </div>
              <div className="space-y-2">
                <label htmlFor="purpose">Purpose of the Book</label>
                <Textarea id="purpose" placeholder="e.g., To explain complex scientific concepts to young adults in a simple way." value={purpose} onChange={(e) => setPurpose(e.target.value)} disabled={isLoading} />
              </div>
              <Button onClick={handleGenerateBook} disabled={isLoading} className="w-full">
                {isLoading ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Writing Book...</> : <><Sparkles className="mr-2 h-4 w-4" /> Generate Book</>}
              </Button>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-2">
          <Card className="min-h-[70vh]">
            <CardHeader className="flex flex-row justify-between items-start">
              <div>
                 <CardTitle>Generated Book</CardTitle>
                 <CardDescription>Your AI-generated book will appear here, ready to be read and downloaded.</CardDescription>
              </div>
              {book && (
                 <Button onClick={handleDownloadPdf} variant="outline" size="sm">
                    <FileDown className="mr-2 h-4 w-4" /> Download as PDF
                </Button>
              )}
            </CardHeader>
            <CardContent>
              {isLoading && (
                 <div className="flex flex-col items-center justify-center h-full text-center text-muted-foreground p-8">
                    <Loader2 className="h-16 w-16 mb-4 animate-spin" />
                    <p className="text-lg font-medium">Our AI author is writing...</p>
                    <p>This might take a moment, great books require a little time!</p>
                </div>
              )}
              {book ? (
                <div className="space-y-6 prose dark:prose-invert max-w-none">
                    <h2 className="text-center font-headline text-3xl">{book.title}</h2>
                    {book.chapters.map((chapter, index) => (
                        <div key={index} className="pt-4">
                            <h3 className="font-bold text-xl">Chapter {index + 1}: {chapter.title}</h3>
                            <p className="text-muted-foreground whitespace-pre-wrap">{chapter.content}</p>
                        </div>
                    ))}
                </div>
              ) : (
                !isLoading && (
                  <div className="flex flex-col items-center justify-center h-full text-center text-muted-foreground p-8">
                    <BookOpen className="h-16 w-16 mb-4" />
                    <p className="text-lg font-medium">Your book is waiting to be written.</p>
                    <p>Fill in the details to start your literary journey!</p>
                  </div>
                )
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </main>
  );
}
